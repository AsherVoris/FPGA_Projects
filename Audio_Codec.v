//=======================================================
//  Author: Asher Voris
//  Class: ECEN 3002
//	 Title: Audio_Codec
//  Last Modified: 2020/06/12
//  Description: I2C master to control the WM8731 audio
//  codec on the DE10 standard board.
//
//  Constraint files and module template
//  generated by Terasic System Builder
//=======================================================

module Audio_Codec(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// Video-In //////////
	input 		          		TD_CLK27,
	input 		     [7:0]		TD_DATA,
	input 		          		TD_HS,
	output		          		TD_RESET_N,
	input 		          		TD_VS,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// Audio //////////
	input 		          		AUD_ADCDAT,
	inout 		          		AUD_ADCLRCK,
	inout 		          		AUD_BCLK,
	output		          		AUD_DACDAT,
	inout 		          		AUD_DACLRCK,
	output		          		AUD_XCK,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// I2C for Audio and Video-In //////////
	output		          		FPGA_I2C_SCLK,
	inout 		          		FPGA_I2C_SDAT,

	//////////// IR //////////
	input 		          		IRDA_RXD,
	output		          		IRDA_TXD,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO,
	
	//////////// Simulation Inputs and Outputs ////////////
	output							DONE,
	input 							RESET,
	output 							I2C_EN,
	output 							I2C_CLOCK,
	output							[7:0] STATE,
	output							[15:0] AUDIO_ADDR,
	output 							OUT
);

`include "params.vh"

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset_n;
wire usb_clock;
wire _i2c_clock;
wire i2c_clock;
wire [6:0] dev_addr;
wire rw;
wire [7:0] addr;
wire [7:0] data;
wire en;
wire ready;

//=======================================================
//  Structural coding
//=======================================================

// Instantiate Synchronous Reset Module (Use a Key if RTL or Dummy Input if Simulation)
`ifdef SIMULATION
Reset_Synchronizer RS0 (.clk(CLOCK_50), .reset(RESET), .reset_n(reset_n));
`else
Reset_Synchronizer RS0 (.clk(CLOCK_50), .reset(KEY[0]), .reset_n(reset_n));
`endif //SIMULATION

// 12MHz PLL for USB mode
USB_PLL PLL0 (.refclk(CLOCK_50), .rst(!reset_n), .outclk_0(usb_clock));

// 52.6MHz for I2C (actually 52.597402MHz)
I2C_PLL PLL1 (.refclk(CLOCK_50), .rst(!reset_n), .outclk_0(_i2c_clock));

clkdiv #(.DIVIDER(DIVIDER)) CD0 (.clk(_i2c_clock), .reset_n(reset_n), .clkout(i2c_clock));
assign I2C_CLOCK = i2c_clock;
wire [7:0] State;
wire done;
assign STATE = State;
assign LEDR[9:2] = done ? 8'b0 : (State-1);

write_registers wr0 (.SDA(FPGA_I2C_SDAT), .SCL(FPGA_I2C_SCLK), .clk(i2c_clock), .reset_n(reset_n), .State(State), .EN(I2C_EN), .done(done), .err(LEDR[0]), .out(/*GPIO[2]*/OUT));

assign DONE = done;
assign AUD_BCLK = usb_clock && done;
assign AUD_XCK = usb_clock && done;

DAI_LRC_GEN DAI_LRC0 (.clk(AUD_BCLK), .LRC(AUD_DACLRCK), .reset_n(reset_n), .en(done));

wire [32:0] audio_addr;

DAI DAI0 (.clk(AUD_DACLRCK), .reset_n(reset_n), .ADDR(audio_addr), .en(done));

wire [32:0] audio_data;
assign AUDIO_ADDR = audio_addr;

AudioRom	AudioRom_inst (.address(audio_addr), .clock(AUD_DACLRCK), .q(audio_data));

Audio_Data dat0 (.reset_n(reset_n), .clk(AUD_XCK), .data(audio_data), .data_bit(AUD_DACDAT), .en(done));

endmodule
