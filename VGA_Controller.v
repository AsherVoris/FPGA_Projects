//`define SIMULATION

//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module VGA_Controller(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,
	
	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,
	
	//////////// SIMULATION OUTPUTS /////////
	input								RESET,
	output							RESET_N,
	output 				[10:0] 	HCNT_OUT,
	output							TC_OUT,
	output				[10:0]	VCNT_OUT,
	output							IAA_OUT,
	output							C_DIV_OUT
);

`define VGA_640_480
`include "params.vh"

//=======================================================
//  REG/WIRE declarations
//=======================================================

wire is_locked;
wire pll_clock;
wire reset_signal;
wire [10:0] HCNT;
wire [10:0] VCNT;
wire TC;
wire IAA;
wire VS;
wire HS;
wire C_DIV;
wire [7:0] r, g, b;

// simulation

//=======================================================
//  Structural coding
//=======================================================

assign VGA_BLANK_N = 1'b1;

assign VGA_SYNC_N = 1'b0;

// Reset Module
// SW9 toggles reset
`ifdef SIMULATION
reset_synchronizer rs0 (.clk(pll_clock), .rst_n(RESET), .q_2(reset_signal));
`else
reset_synchronizer rs0 (.clk(pll_clock), .rst_n(~KEY[0]), .q_2(reset_signal));
`endif //SIMULATION

assign RESET_N = reset_signal;

// PLL Module

video_pll pll0 (.refclk(CLOCK_50), .rst(~reset_signal), .outclk_0(pll_clock), .locked(is_locked));

assign	VGA_CLK = pll_clock;

// Timing Controller Logic

horizontal_counter #(.HORIZONTAL_TOTAL_LINE(HORIZONTAL_TOTAL_LINE)) hc0 (.clk(pll_clock), .rst(reset_signal), .HCNT(HCNT), .TC(TC));

`ifdef SIMULATION
assign 	HCNT_OUT = HCNT;
assign 	TC_OUT = TC;
`endif //SIMULATION

vertical_counter #(.VERTICAL_TOTAL_FRAME(VERTICAL_TOTAL_FRAME)) vc0 (.clk(pll_clock), .rst(reset_signal), .en(TC), .VCNT(VCNT));

`ifdef SIMULATION
assign 	VCNT_OUT = VCNT;
`endif //SIMULATION

horizontal_sync_pulse_generator
#(
.HORIZONTAL_VISIBLE_AREA(HORIZONTAL_VISIBLE_AREA),
.HORIZONTAL_FRONT_PORCH(HORIZONTAL_FRONT_PORCH),
.HORIZONTAL_SYNC_PULSE(HORIZONTAL_SYNC_PULSE)
) 
hspg0 (.rst(reset_signal), .HCNT(HCNT), .HS(HS));

assign VGA_HS = HS;

vertical_sync_pulse_generator 
#(
.VERTICAL_VISIBLE_AREA(VERTICAL_VISIBLE_AREA), 
.VERTICAL_FRONT_PORCH(VERTICAL_FRONT_PORCH),
.VERTICAL_SYNC_PULSE(VERTICAL_SYNC_PULSE)
)
 vspg0 (.rst(reset_signal), .VCNT(VCNT), .VS(VS));
 
assign VGA_VS = VS;

display_area_signal_generator
#(
.HORIZONTAL_VISIBLE_AREA(HORIZONTAL_VISIBLE_AREA),
.VERTICAL_VISIBLE_AREA(VERTICAL_VISIBLE_AREA)
) 
dasg0 (.rst(reset_signal), .HCNT(HCNT), .VCNT(VCNT), .IAA(IAA));

`ifdef SIMULATION
assign 	IAA_OUT = IAA;
`endif //SIMULATION

// Pixel Generation Logic

// Degenerate logic: full screen is red
//reg [7:0] red, green, blue;
//always@(*)
//begin
//if(IAA == 1'b1)
//begin
//	red <= 8'd127;
//	green <= 8'd0;
//	blue <= 8'd0;
//end
//else
//begin
//	red <= 8'd0;
//	green <= 8'd0;
//	blue <= 8'd0;
//end
//end
//assign VGA_R = red;
//assign VGA_G = green;
//assign VGA_B = blue;

clkdiv #(.DIVIDER(DIVIDER)) cd0 (.clk(pll_clock), .reset_n(reset_signal), .clkout(C_DIV));

`ifdef SIMULATION
assign C_DIV_OUT = C_DIV;
`endif //SIMULATION

image_generator
#(
.HORIZONTAL_VISIBLE_AREA(HORIZONTAL_VISIBLE_AREA),
.VERTICAL_VISIBLE_AREA(VERTICAL_VISIBLE_AREA),
.RED_OFF_VALUE(RED_OFF_VALUE),
.GREEN_OFF_VALUE(GREEN_OFF_VALUE),
.BLUE_OFF_VALUE(BLUE_OFF_VALUE),
.D_POS_LEFT_SQUARE_LEFT_BOUND(D_POS_LEFT_SQUARE_LEFT_BOUND),
.D_POS_LEFT_SQUARE_RIGHT_BOUND(D_POS_LEFT_SQUARE_RIGHT_BOUND),
.D_POS_RIGHT_SQUARE_LEFT_BOUND(D_POS_RIGHT_SQUARE_LEFT_BOUND),
.D_POS_RIGHT_SQUARE_RIGHT_BOUND(D_POS_RIGHT_SQUARE_RIGHT_BOUND),
.D_POS_SQUARES_TOP_BOUND(D_POS_SQUARES_TOP_BOUND),
.D_POS_SQUARES_BOTTOM_BOUND(D_POS_SQUARES_BOTTOM_BOUND)
) 
ig0 (.CLK(C_DIV), .IAA(IAA), .VS(VS), .KEY(KEY), .HCNT(HCNT), .VCNT(VCNT), .SW(SW) , .rst(reset_signal), .R(r), .G(g), .B(b));

assign VGA_R = r;
assign VGA_G = g;
assign VGA_B = b;

endmodule
